<?php

namespace common\models;

use common\enums\LoadRateType;
use common\models\base\LoadRatingZoneZone as BaseLoadRatingZoneZone;
use Yii;

/**
 * This is the model class for table "load_rating_zonezone".
 */
class LoadRatingZoneZone extends BaseLoadRatingZoneZone implements LoadRatingMethodInterface
{
    const FLAT  = LoadRateType::FLAT;
    const MILES = LoadRateType::MILES;
    const PIECE = LoadRateType::PIECE;
    const SPACE = LoadRateType::SPACE;
    const POUND = LoadRateType::POUND;
    const CWT   = LoadRateType::CWT;
    const TON   = LoadRateType::TON;
    const LOT   = LoadRateType::LOT;
    const STEP  = LoadRateType::STEP;

    public function scenarios()
    {
        return self::getFieldsByType();
    }

    public static function getFieldsByType()
    {
        $first = ['zone_1', 'zone_2'];
        $last = ['description'];

        return [
            self::FLAT  => array_merge($first, ['rate', 'bill_miles'], $last),
            self::MILES => array_merge($first, ['rate', 'base_rate', 'base_miles', 'min', 'bill_miles', 'trl_type'], $last),
            self::PIECE => array_merge($first, ['rate'], $last),
            self::SPACE => array_merge($first, ['rate'], $last),
            self::POUND => array_merge($first, ['low_wgt', 'high_wgt', 'rate'], $last),
            self::CWT   => array_merge($first, ['low_wgt', 'high_wgt', 'rate'], $last),
            self::TON   => array_merge($first, ['rate'], $last),
            self::LOT   => array_merge($first, ['rate', 'pieces'], $last),
            self::STEP  => array_merge($first, ['max_pcs', 'max_space', 'max_wgt', 'rate'], $last),
        ];
    }

    public function rules()
    {
        return array_merge(
            parent::rules(), [
                [['rate'], 'required', 'on' => [self::FLAT, self::MILES, self::PIECE, self::SPACE, self::POUND, self::CWT, self::TON, self::LOT, self::STEP]],
                [['low_wgt', 'high_wgt'], 'required', 'on' => [self::POUND, self::CWT]],
                [['pieces'], 'required', 'on' => [self::LOT]],
                [['bill_miles'], 'required', 'on' => [self::FLAT]],
            ]
        );
    }

    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'low_wgt' => Yii::t('app', 'to specify Minimum Rate set `Low Wgt` and `High Wgt` = 0'),
            'high_wgt' => Yii::t('app', 'to specify Maximum Rate `High Wgt` = 99999'),
            'rate' => false,
            'base_rate' => Yii::t('app', 'if entered, `Base Rate` + (per-mile rate * load miles)'),
            'base_miles' => Yii::t('app', 'if entered, (per-mile rate * load miles in excess of Base Miles)'),
            'min' => Yii::t('app', 'if entered, if needed, the load will be rated as e flat rate minimum amount'),
            'bill_miles' => Yii::t('app', 'if entered, override PCMiler\'s calculations'),
            'trl_type' => Yii::t('app', 'if selected, the rate will only apply to loads with the selected type'),
        ]);
    }


    public static function getColumns($rateType)
    {
        return self::getFieldsByType()[$rateType];
    }

    public function getFieldParams($model, $field)
    {
        switch ($field) {
            case 'description':
                return ['maxlength' => true];
            case 'rate':
            case 'min':
                return ['type' => 'number', 'min' => 0, 'step' => 0.01];
            case 'bill_miles':
            case 'base_miles':
            case 'max_space':
            case 'max_wgt':
                return ['type' => 'number', 'min' => 0];
            case 'low_wgt':
            case 'high_wgt':
                return ['type' => 'number', 'min' => 0, 'value' => $model->isNewRecord ? 0 : $model->$field];
            case 'base_rate':
            case 'pieces':
            case 'max_pcs':
                return ['type' => 'number', 'min' => 0, 'step' => 0.0001];
        }
    }

    public function beforeSave($insert)
    {
        if ($this->trl_type == '')
            unset($this->trl_type);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
