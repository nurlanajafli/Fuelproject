<?php

namespace common\models;

use common\enums\LoadStatus;
use common\enums\RateBy;
use common\enums\UnitItemStatus;
use common\helpers\DateTime;
use common\models\base\Load as BaseLoad;
use common\models\traits\Template;
use Yii;
use yii\db\Expression;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "load".
 *
 * @property bool $loadcleared
 * @property bool $backupcleared
 * @property-read integer $bill_miles
 */
class Load extends BaseLoad
{
    use Template;

    public $gross;
    public $discount_amount;
    public $freight;
    public $accessories;
    public $total;
    public $_old_total;

    private $assignmentErrors = [];

    public function behaviors()
    {
        return DateTime::setLocalTimestamp(parent::behaviors());
    }

    public function rules()
    {
        return ArrayHelper::merge(
            parent::rules(),
            [
                [['status'], 'in', 'range' => LoadStatus::getEnums()],
                [['trailer_type', 'signed_for_by'], 'default', 'value' => null],
                [['bill'], 'in', 'range' => \common\enums\Bill::getEnums()]
            ]
        );
    }

    /**
     * @inheritdoc
     */
    public function getLoadStops()
    {
        return parent::getLoadStops()->orderBy('stop_number');
    }

    public function attributeLabels()
    {
        return ArrayHelper::merge(parent::attributeLabels(), [
            'customer_reference' => Yii::t('app', 'Reference'),
            'office_id' => Yii::t('app', 'Office'),
            'type_id' => Yii::t('app', 'Type'),
            'trailer_type' => Yii::t('app', 'Trailer'),
            'rate_source' => Yii::t('app', 'Source'),
            'discount_percent' => Yii::t('app', 'Discount Pct'),
            'commodity_commodity_id' => Yii::t('app', 'Commodity'),
            'commodity_reference' => Yii::t('app', 'Reference'),
            'commodity_weight' => Yii::t('app', 'Weight'),
            'commodity_pieces' => Yii::t('app', 'Pieces'),
            'commodity_space' => Yii::t('app', 'Space')
        ]);
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        $this->updateRate();
        $this->_old_total = $this->total;
        return true;
    }

    public function updateRate()
    {
        if ($this->rate_by) {
            switch ($this->rate_by) {
                case RateBy::FLAT:
                    $this->gross = $this->rate;
                    $this->discount_amount = $this->discount_percent * $this->gross;
                    $this->freight = $this->gross - $this->discount_amount;
                    $this->accessories = $this->calcAccessories();
                    $this->total = $this->freight + $this->accessories;
                    break;
                case RateBy::MILES:
                    $miles = $this->bill_miles ?? 0;
                    $this->gross = $this->rate * $miles;
                    $this->discount_amount = $this->discount_percent * $this->gross;
                    $this->freight = $this->gross - $this->discount_amount;
                    $this->accessories = $this->calcAccessories();
                    $this->total = $this->freight + $this->accessories;
                    break;
                // TODO other RateBy cases;
            }
        }
    }

    private function calcAccessories()
    {
        $res = 0;
        foreach ($this->loadAccessories as $accessory) {
            /** @var LoadAccessory $accessory */
            $res += $accessory->amount;
        }

        return $res;
    }

    /**
     * Check load fields before Dispatch or Reserve
     * @param bool $reserveMode
     * @return array
     */
    public function getAssignmentErrors(bool $reserveMode = false): array
    {
        $da = $this->dispatchAssignment;

        if (!empty($da)) {
            if ($this->status == LoadStatus::RESERVED && !$reserveMode) {
                if ($da->unit->status == UnitItemStatus::IN_USE) {
                    $this->assignmentErrors[] = Yii::t('app', 'Specified Unit is not Available');
                }
                if ($da->driver->status == UnitItemStatus::IN_USE) {
                    $this->assignmentErrors[] = Yii::t('app', 'Specified CoDriver is not Available');
                }
                if ($da->codriver_id && $da->driver->status == UnitItemStatus::IN_USE) {
                    $this->assignmentErrors[] = Yii::t('app', 'Specified Driver is not Available');
                }
                if ($da->truck->status == UnitItemStatus::IN_USE) {
                    $this->assignmentErrors[] = Yii::t('app', 'Specified Trick is not Available');
                }
                if ($da->trailer->status == UnitItemStatus::IN_USE) {
                    $this->assignmentErrors[] = Yii::t('app', 'Specified Trailer is not Available');
                }
                if ($da->trailer2_id && $da->trailer2->status == UnitItemStatus::IN_USE) {
                    $this->assignmentErrors[] = Yii::t('app', 'Specified Trailer2 is not Available');
                }
            }
            return $this->assignmentErrors;
        }

        if (!$this->billTo) {
            $this->assignmentErrors[] = Yii::t('app', 'Load has no valid customer assigned');
        }

        if ($this->bill_miles == 0) {
            $this->assignmentErrors[] = Yii::t('app', 'Load has no stops added');
        }

        if (!$this->type) {
            $this->assignmentErrors[] = Yii::t('app', 'Please specify load type');
        }

        if (!$this->customer_reference) {
            $this->assignmentErrors[] = Yii::t('app', "Please fill out Reference field");
        }

        return $this->assignmentErrors;
    }

    public function changeStatus($newStatus)
    {
        // TODO fire events?
        if ($this->status != $newStatus && in_array($newStatus, LoadStatus::getEnums())) {
            $this->status = $newStatus;
            $this->save();
        }
    }

    public function addNote($str)
    {
        $note = new LoadNote();
        $nowDate = DateTime::nowDateYMD();
        $nowTime = DateTime::nowTime();
        $note->created_at = "{$nowDate} {$nowTime}:00";
        $note->load_id = $this->id;
        $note->notes = $str;
        $note->save();
    }

    public function getLastLoadStop()
    {
        $stops = $this->getLoadStopsOrdered();
        return end($stops);
    }

    public function getLoadStopsOrdered()
    {
        $array = $this->loadStops;
        ArrayHelper::multisort($array, 'stop_number');
        return $array;
    }

    public function hazMatCode()
    {
        return $this->commodityCommodity ? $this->commodityCommodity->hazmat_code : null;
    }

    public function XStops()
    {
        return max(count($this->loadStops) - 2, 0);
    }

    public function getLoadCleared()
    {
        return (bool)$this->scans;
    }

    public function getBackupCleared()
    {
        return false;
    }

    /**
     * @return int
     */
    public function getbill_miles(): int
    {
        $result = $this->getLoadStops()->sum(new Expression('COALESCE(miles_to_next, 0)'));
        return $result ?? 0;
    }

    public function isEmpty()
    {
        $hasChildren = false;
        Yii::$app->transaction->exec(function () use (&$hasChildren) {
            try {
                Yii::$app->db->createCommand('DELETE FROM ' . static::tableName() . ' WHERE id=:id', [':id' => $this->id])->execute();
            } catch (\Exception $exception) {
                $hasChildren = true;
            }
            return false;
        });
        return empty($this->bill_to) && empty($this->customer_reference) && empty($this->type_id) && empty($this->trailer_type) && empty($this->seal_no) && !$hasChildren;
    }
}
